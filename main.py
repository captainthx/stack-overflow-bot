from telebot import TeleBot,types
from telebot.types import InlineKeyboardButton,InlineKeyboardMarkup
from googletrans import Translator
from collections import deque
import requests
import ssl


# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Telegram Bot Token
Token = "6800120949:AAHeWsrkT38-SQHfoTLpkvEDk9KL-nDaY_8"
bot = TeleBot(Token)
translator = Translator()

# ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡πÄ‡∏Å‡πá‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)
search_history = deque(maxlen=10)


# ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ SSL
try:
    requests.packages.urllib3.disable_warnings()
    ssl._create_default_https_context = ssl.create_unverified_context
except AttributeError:
    pass


# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
def translate_to_english(text):
    translated = translator.translate(text,src="auto",dest='en')
    return translated.text


# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏ô Stack Overflow
def search_stackoverflow(query):
    url = "https://api.stackexchange.com/2.3/search/advanced"
    params =  {
        "order":"desc",
        "sort":"relevance",
        "q":query,
        "site":"stackoverflow",
        "accepted":True,
        "pageSize":4
    }
    try:
        response = requests.get(url,params=params ,verify=False)
        data = response.json()
        if "items" in data and len(data["items"]) > 0:
            results =["üîé‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"]
            keyboard = types.InlineKeyboardMarkup()
            
            for question in data["items"]:
                title = question["title"]
                link = question["link"]
                
               
                results.append(f"üìå *{title}*")
                keyboard.add(types.InlineKeyboardButton("üîó ‡πÄ‡∏õ‡∏¥‡∏î‡∏î‡∏π‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°", url=link))

            return "\n\n".join(results), keyboard
        else:
            return "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á üò¢", None
          
    except requests.exceptions.RequestException as e:
        return f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: {str(e)}",None
    

@bot.message_handler(commands=['start','help'])
def send_welcome(message):
    bot.send_message(message.chat.id,"üëã ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ! ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏à‡∏≤‡∏Å Stack Overflow ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /top ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°")


@bot.message_handler(commands=['top'])
def get_top_questions(message):
    url = "https://api.stackexchange.com/2.3/questions"
    params = {
        "order": "desc",
        "sort": "votes",
        "site": "stackoverflow",
        "pagesize": 4  
    }
    try:
        response = requests.get(url, params=params, verify=False)
        data = response.json()

        if "items" in data and len(data["items"]) > 0:
            results = ["üî•‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"]
            keyboard = types.InlineKeyboardMarkup()
            for question in data["items"]:
                title = question["title"]
                link = question["link"]
                
                results.append(f"üìå *{title}*")
                keyboard.add(types.InlineKeyboardButton("üîó ‡πÄ‡∏õ‡∏¥‡∏î‡∏î‡∏π‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°", url=link))
                
            bot.send_message(
                message.chat.id, "\n\n".join(results), reply_markup=keyboard
            )
        else:
            bot.send_message(message.chat.id, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ üò¢")
    except requests.exceptions.RequestException as e:
        bot.send_message(message.chat.id, f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: {str(e)}")
            
                            

@bot.message_handler(func=lambda message:True)
def search_question(message):
    query = message.text
    translator_query = translate_to_english(query)
    search_history.append(query)
    
    bot.reply_to(message,"üîé _‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà..._")
    result,keybord = search_stackoverflow(translator_query)
    
    if keybord:
        bot.send_message(message.chat.id,result,reply_markup=keybord)
    else:    
        bot.send_message(message.chat.id,result)


        
if __name__ == "__main__":
    print("Bot is running....")
    bot.polling()